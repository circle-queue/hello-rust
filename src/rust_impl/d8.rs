use num::integer::lcm;
use std::collections::HashMap;

use itertools::Itertools;

fn parse_input(input: &Vec<String>) -> (Vec<char>, HashMap<&str, (&str, &str)>) {
    let turn_seq = input.get(0).unwrap().chars().collect::<Vec<_>>();
    let mut possible_turns = HashMap::new();
    for line in input.iter().skip(1) {
        let (src, dst) = line.split(" = ").collect_tuple().unwrap();
        let (left, right) = dst
            .split(", ")
            .map(|c| c.trim_matches(|x: char| !x.is_alphanumeric()))
            .collect_tuple()
            .unwrap();
        possible_turns.insert(src, (left, right));
    }
    (turn_seq, possible_turns)
}

pub fn solve1(input: Vec<String>) -> String {
    let (turn_seq, possible_turns) = parse_input(&input);

    let mut now = "AAA";
    let mut n_turns = 0;
    for (i, turn) in turn_seq.iter().cycle().enumerate() {
        if now == "ZZZ" {
            n_turns = i;
            break;
        }
        let turns = possible_turns.get(now).unwrap();
        now = if *turn == 'L' { turns.0 } else { turns.1 };
    }

    n_turns.to_string()
}

pub fn solve2(input: Vec<String>) -> String {
    "
    Turns out the input is constructed exactly such that the first time Z is constructed, that is the cycle length
    https://www.reddit.com/r/adventofcode/comments/18did3d/2023_day_8_part_1_my_input_maze_plotted_using/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
    ";
    let (turn_seq, possible_turns) = parse_input(&input);

    let mut ghosts = possible_turns
        .keys()
        .map(|k| *k)
        .filter(|k| k.ends_with('A'));

    let mut result = 1;
    for mut now in ghosts {
        for (i, turn) in turn_seq.iter().cycle().enumerate() {
            let turns = possible_turns.get(now).unwrap();
            now = if *turn == 'L' { turns.0 } else { turns.1 };
            if now.ends_with('Z') {
                result = lcm(result, i + 1);
                break;
            }
        }
    }

    result.to_string()
}

pub fn sample_input1() -> Vec<String> {
    vec![
        "RL".to_string(),
        "AAA = (BBB, CCC)".to_string(),
        "BBB = (DDD, EEE)".to_string(),
        "CCC = (ZZZ, GGG)".to_string(),
        "DDD = (DDD, DDD)".to_string(),
        "EEE = (EEE, EEE)".to_string(),
        "GGG = (GGG, GGG)".to_string(),
        "ZZZ = (ZZZ, ZZZ)".to_string(),
    ]
}

pub fn sample_input2() -> Vec<String> {
    vec![
        "LR".to_string(),
        "11A = (11B, XXX)".to_string(),
        "11B = (XXX, 11Z)".to_string(),
        "11Z = (11B, XXX)".to_string(),
        "22A = (22B, XXX)".to_string(),
        "22B = (22C, 22C)".to_string(),
        "22C = (22Z, 22Z)".to_string(),
        "22Z = (22B, 22B)".to_string(),
        "XXX = (XXX, XXX)".to_string(),
    ]
}
pub fn full_input1() -> Vec<String> {
    full_input2()
}

pub fn full_input2() -> Vec<String> {
    vec![
        "LRRLLRLRRRLRRRLRRLRRRLRRLRRRLRRLRRRLRLRRRLRRRLRRRLRLRRLRRRLRRRLRRLRRLRRLRLLLRRRLRRRLRLRLRRLLRRRLRRLRRRLRLRRLRRRLRRRLLRLRLLRRRLRRRLLRRRLRRRLRRRLRRLRRRLLLRRRLRLLLRLRLRLLRLRLLLRRLRRLLRRLRRRLRRLRRLRLRRLLRRLRLRRLLLRRRLLRRRLLRLRLLRRRLRLLRRLRLRRLRLRRRLLRRRLLRRLRLRRLRRLLRLRLRRRLRLRRRR".to_string(),
        "GLJ = (QQV, JTL)".to_string(),
        "JSJ = (DKN, GQN)".to_string(),
        "MGD = (BPL, LQC)".to_string(),
        "VSK = (SPH, DDH)".to_string(),
        "TSB = (MKP, TKX)".to_string(),
        "HPD = (GKG, XMX)".to_string(),
        "BLZ = (HGN, KRR)".to_string(),
        "BMQ = (JXC, HFC)".to_string(),
        "GDG = (BVJ, NBL)".to_string(),
        "LST = (PVJ, DPR)".to_string(),
        "QQQ = (RLV, SNJ)".to_string(),
        "TMV = (XGV, KCL)".to_string(),
        "NPZ = (JRD, NHL)".to_string(),
        "DDH = (NDR, XPN)".to_string(),
        "SFQ = (TKD, SQH)".to_string(),
        "RNK = (TJN, NFX)".to_string(),
        "FRS = (SCJ, FDV)".to_string(),
        "RST = (BSQ, MHQ)".to_string(),
        "DSM = (FRX, DMN)".to_string(),
        "GBN = (VBL, XRK)".to_string(),
        "GLH = (KNN, PKP)".to_string(),
        "JRD = (LDP, RNH)".to_string(),
        "SPV = (JNR, FRK)".to_string(),
        "PMD = (FXP, BKL)".to_string(),
        "MDV = (MGD, FHM)".to_string(),
        "MGG = (KMN, QPL)".to_string(),
        "FNX = (FKG, NLT)".to_string(),
        "FPH = (QXS, PBR)".to_string(),
        "DKP = (QFT, QQQ)".to_string(),
        "XVH = (PVP, GBJ)".to_string(),
        "SSP = (BHD, KRM)".to_string(),
        "JVR = (RHB, LDJ)".to_string(),
        "HCX = (RNK, LGT)".to_string(),
        "LRX = (SFN, GXD)".to_string(),
        "DXN = (NQX, KNL)".to_string(),
        "GNT = (GHV, DKG)".to_string(),
        "QVF = (NJN, FSN)".to_string(),
        "QHQ = (FXN, PNP)".to_string(),
        "CHX = (DHN, BQB)".to_string(),
        "GQD = (TLQ, XXG)".to_string(),
        "RMF = (RVF, KKR)".to_string(),
        "JHN = (NRG, RCC)".to_string(),
        "MBG = (XPV, MSB)".to_string(),
        "XJN = (SQT, XXJ)".to_string(),
        "JNR = (VTP, XSF)".to_string(),
        "NXD = (DKP, MKJ)".to_string(),
        "LSS = (KHS, BSV)".to_string(),
        "SQH = (BLH, VCG)".to_string(),
        "TLM = (DCG, BQL)".to_string(),
        "HTG = (TLF, KRB)".to_string(),
        "GGM = (KLV, PTG)".to_string(),
        "PVJ = (BHR, TRH)".to_string(),
        "PRP = (QLC, JPQ)".to_string(),
        "CVC = (KVJ, FTM)".to_string(),
        "RMH = (RPD, FFK)".to_string(),
        "MRL = (KFK, LJK)".to_string(),
        "VMG = (LSX, FPH)".to_string(),
        "DKQ = (XSM, CXK)".to_string(),
        "QBD = (BGB, GPS)".to_string(),
        "RFV = (QCG, NJD)".to_string(),
        "FDN = (QFL, DXN)".to_string(),
        "RMV = (NCJ, PMZ)".to_string(),
        "BCJ = (MDD, TMG)".to_string(),
        "BMB = (GLH, MKK)".to_string(),
        "DLQ = (JKX, VGS)".to_string(),
        "NBL = (GFQ, PRQ)".to_string(),
        "NVG = (SCS, JTS)".to_string(),
        "CBX = (MXQ, QSM)".to_string(),
        "HFJ = (NXX, VRX)".to_string(),
        "FMQ = (KDV, HFJ)".to_string(),
        "DSK = (BND, GFJ)".to_string(),
        "TRM = (MMX, BTG)".to_string(),
        "XKS = (GXD, SFN)".to_string(),
        "LDJ = (TFQ, CJK)".to_string(),
        "LFP = (TFS, LST)".to_string(),
        "PQS = (PJR, SMD)".to_string(),
        "MTA = (JPD, MVX)".to_string(),
        "FMM = (GPC, BVB)".to_string(),
        "NJD = (JMG, DPL)".to_string(),
        "VQJ = (KRM, BHD)".to_string(),
        "PXP = (BPB, JJK)".to_string(),
        "JDM = (HHQ, JXD)".to_string(),
        "BJK = (SRN, DRL)".to_string(),
        "MRS = (RPT, SQF)".to_string(),
        "RCC = (DRD, SPP)".to_string(),
        "XPG = (XRK, VBL)".to_string(),
        "JLR = (LJQ, XDP)".to_string(),
        "KLV = (SKX, SKX)".to_string(),
        "JBB = (LRB, RRT)".to_string(),
        "NDP = (KMS, DDJ)".to_string(),
        "XML = (TPD, VKQ)".to_string(),
        "TPM = (PKJ, PGR)".to_string(),
        "DGQ = (JFK, TMB)".to_string(),
        "XTL = (MPK, CTL)".to_string(),
        "VSH = (BNH, HJR)".to_string(),
        "PVG = (SPV, KCS)".to_string(),
        "CCQ = (LQB, VTK)".to_string(),
        "PLS = (HPS, CVC)".to_string(),
        "GMQ = (CTG, QHQ)".to_string(),
        "PNP = (VSK, JCV)".to_string(),
        "JPD = (KKV, FQP)".to_string(),
        "PRL = (KRB, TLF)".to_string(),
        "NMT = (HXL, NHV)".to_string(),
        "DLP = (KXR, BXQ)".to_string(),
        "NFG = (DSR, HNX)".to_string(),
        "BPB = (BTM, MGR)".to_string(),
        "JPL = (NMT, QMD)".to_string(),
        "HJG = (XJD, HHX)".to_string(),
        "BBK = (VVF, SBN)".to_string(),
        "GQL = (XNX, CKR)".to_string(),
        "BND = (SQB, KFG)".to_string(),
        "VRF = (JKS, LGG)".to_string(),
        "PXG = (QMD, NMT)".to_string(),
        "FKG = (GBS, JLR)".to_string(),
        "NCJ = (NFG, CQH)".to_string(),
        "CVM = (LFD, NPZ)".to_string(),
        "GQN = (SMM, PQH)".to_string(),
        "LJQ = (LXQ, KVG)".to_string(),
        "PFK = (HHQ, JXD)".to_string(),
        "KLQ = (JNB, DKQ)".to_string(),
        "QRP = (SCB, HCM)".to_string(),
        "LRB = (RMD, KLN)".to_string(),
        "XPP = (GMK, LKL)".to_string(),
        "LFD = (NHL, JRD)".to_string(),
        "TVK = (TMV, TJF)".to_string(),
        "MQD = (HTG, PRL)".to_string(),
        "MKJ = (QQQ, QFT)".to_string(),
        "QLF = (CHX, XSR)".to_string(),
        "MPP = (XMK, QFP)".to_string(),
        "HQQ = (PCS, PDC)".to_string(),
        "NXX = (BTN, KBJ)".to_string(),
        "JBQ = (GGH, FJL)".to_string(),
        "BGB = (JSF, MNP)".to_string(),
        "BRD = (VMF, NTR)".to_string(),
        "HCM = (RHX, KJG)".to_string(),
        "NKP = (GHV, DKG)".to_string(),
        "XJK = (TRS, DGQ)".to_string(),
        "GPS = (MNP, JSF)".to_string(),
        "NCM = (VMJ, CSC)".to_string(),
        "LSX = (PBR, QXS)".to_string(),
        "VLF = (MTL, GVK)".to_string(),
        "XFT = (XGS, CRL)".to_string(),
        "HLR = (FMM, QLH)".to_string(),
        "FFR = (XXX, BGX)".to_string(),
        "MRB = (XJD, HHX)".to_string(),
        "TVS = (MTL, GVK)".to_string(),
        "KNL = (KDN, HQQ)".to_string(),
        "PNV = (SQF, RPT)".to_string(),
        "HVB = (BBB, LLG)".to_string(),
        "RGX = (RLK, MSX)".to_string(),
        "MKB = (HNP, NGM)".to_string(),
        "FKL = (XMK, QFP)".to_string(),
        "LXQ = (GNB, TQH)".to_string(),
        "CQF = (NGF, NQF)".to_string(),
        "BSV = (KFX, HNH)".to_string(),
        "SVQ = (PXP, XQM)".to_string(),
        "BHD = (XVH, GDN)".to_string(),
        "QQB = (PCB, PCB)".to_string(),
        "DCG = (GRH, RGX)".to_string(),
        "RRT = (KLN, RMD)".to_string(),
        "KDN = (PDC, PCS)".to_string(),
        "RHJ = (VTK, LQB)".to_string(),
        "LVR = (VSH, QGS)".to_string(),
        "NHT = (LQS, DMB)".to_string(),
        "PBR = (TCF, JCC)".to_string(),
        "GBJ = (MLT, XNB)".to_string(),
        "BJB = (XPR, MBG)".to_string(),
        "PQH = (MCH, LMB)".to_string(),
        "MPM = (BSV, KHS)".to_string(),
        "SGB = (TKF, PMD)".to_string(),
        "XQM = (JJK, BPB)".to_string(),
        "TLQ = (FGM, CRC)".to_string(),
        "FXP = (BCJ, TDR)".to_string(),
        "VDG = (VMJ, CSC)".to_string(),
        "XGV = (LHS, LTS)".to_string(),
        "JKP = (PXG, JPL)".to_string(),
        "KFQ = (TSB, RNB)".to_string(),
        "NHL = (LDP, RNH)".to_string(),
        "TRS = (JFK, TMB)".to_string(),
        "PMM = (RHC, KMQ)".to_string(),
        "QMB = (PPJ, CNG)".to_string(),
        "MKH = (DDJ, KMS)".to_string(),
        "NCG = (XXX, BGX)".to_string(),
        "DBG = (SND, HMN)".to_string(),
        "GVK = (TQD, JHN)".to_string(),
        "KKM = (KKL, PBT)".to_string(),
        "HLP = (JPQ, QLC)".to_string(),
        "GPH = (JKG, DKK)".to_string(),
        "XQP = (GLH, MKK)".to_string(),
        "HRF = (BGB, GPS)".to_string(),
        "BXQ = (BDH, GQT)".to_string(),
        "NDR = (KKM, LRR)".to_string(),
        "HQR = (RGL, RMX)".to_string(),
        "PCS = (DTB, LDS)".to_string(),
        "LQB = (GMQ, HRQ)".to_string(),
        "KKR = (KTV, CMB)".to_string(),
        "NGM = (KFQ, BQJ)".to_string(),
        "KLN = (XFT, JRL)".to_string(),
        "HRR = (RHJ, CCQ)".to_string(),
        "XSF = (CKX, PLS)".to_string(),
        "BTG = (GDG, JDS)".to_string(),
        "PBT = (NVG, DVP)".to_string(),
        "CPP = (VSH, QGS)".to_string(),
        "MLN = (VGS, JKX)".to_string(),
        "JRF = (SKN, RMF)".to_string(),
        "KHS = (KFX, HNH)".to_string(),
        "DDP = (QJG, XKJ)".to_string(),
        "FGM = (TVK, TNS)".to_string(),
        "QJH = (XSL, QXP)".to_string(),
        "TNX = (NBV, KLQ)".to_string(),
        "JVC = (FBR, PFT)".to_string(),
        "XPV = (TLM, PPK)".to_string(),
        "PCK = (KBG, TGJ)".to_string(),
        "HRS = (VKM, JVF)".to_string(),
        "DKK = (NHT, ZZZ)".to_string(),
        "TJN = (KTL, QLF)".to_string(),
        "THT = (JJQ, LRJ)".to_string(),
        "JNB = (CXK, XSM)".to_string(),
        "CRL = (VXT, TBG)".to_string(),
        "RVF = (CMB, KTV)".to_string(),
        "GQT = (PBB, CVM)".to_string(),
        "QGF = (MGT, SKV)".to_string(),
        "SCJ = (CQF, KRQ)".to_string(),
        "SCM = (DPB, PMM)".to_string(),
        "KNN = (XLQ, VPB)".to_string(),
        "PPK = (BQL, DCG)".to_string(),
        "LPP = (HJG, MRB)".to_string(),
        "RRM = (RXT, PBZ)".to_string(),
        "DCT = (FTF, HVB)".to_string(),
        "PQP = (PBQ, HVR)".to_string(),
        "NTV = (SCM, GKN)".to_string(),
        "XXX = (LSS, MPM)".to_string(),
        "BKP = (LXL, LXL)".to_string(),
        "BLH = (QLV, SFJ)".to_string(),
        "SPH = (NDR, XPN)".to_string(),
        "CVF = (KDV, HFJ)".to_string(),
        "XDK = (RHJ, CCQ)".to_string(),
        "NQQ = (NTT, FVL)".to_string(),
        "TQF = (XCV, NDX)".to_string(),
        "VRX = (BTN, KBJ)".to_string(),
        "KFX = (XLN, FDN)".to_string(),
        "DMN = (TPT, JRQ)".to_string(),
        "VVF = (TPQ, CDH)".to_string(),
        "XPN = (LRR, KKM)".to_string(),
        "LQC = (TMX, LHQ)".to_string(),
        "XXT = (TLR, DDP)".to_string(),
        "PBB = (LFD, LFD)".to_string(),
        "GKF = (CHM, XTL)".to_string(),
        "SNJ = (NSR, KVD)".to_string(),
        "FKS = (PPL, PSM)".to_string(),
        "BJZ = (MVX, JPD)".to_string(),
        "JSF = (GQD, GQP)".to_string(),
        "BFM = (QXR, MVF)".to_string(),
        "QSD = (JHV, JKP)".to_string(),
        "XSR = (DHN, BQB)".to_string(),
        "SVM = (PKJ, PGR)".to_string(),
        "XXJ = (HGF, MPG)".to_string(),
        "KRB = (QMB, VNX)".to_string(),
        "XJD = (SFQ, SGF)".to_string(),
        "HGN = (KBF, LXS)".to_string(),
        "TKF = (FXP, BKL)".to_string(),
        "KHB = (TPJ, CGD)".to_string(),
        "JFK = (JJX, DMH)".to_string(),
        "PMT = (HGC, HJQ)".to_string(),
        "NBV = (DKQ, JNB)".to_string(),
        "FMN = (BJB, HSV)".to_string(),
        "HPS = (KVJ, KVJ)".to_string(),
        "GLT = (LXL, NFN)".to_string(),
        "PSM = (PMT, CKP)".to_string(),
        "RSM = (JRF, PDB)".to_string(),
        "KVD = (PFK, JDM)".to_string(),
        "CSQ = (HJG, MRB)".to_string(),
        "PKJ = (HDR, TJQ)".to_string(),
        "LRJ = (JSJ, BFS)".to_string(),
        "KFG = (KKT, CQR)".to_string(),
        "TPD = (THT, KBB)".to_string(),
        "KBB = (LRJ, JJQ)".to_string(),
        "XGS = (VXT, TBG)".to_string(),
        "RHX = (XJK, QND)".to_string(),
        "QPL = (DDN, STH)".to_string(),
        "BQB = (XJC, SBH)".to_string(),
        "KCL = (LHS, LTS)".to_string(),
        "XPH = (KXR, BXQ)".to_string(),
        "QNA = (NHL, JRD)".to_string(),
        "KVJ = (KHJ, KHJ)".to_string(),
        "QJP = (RNK, LGT)".to_string(),
        "QFL = (KNL, NQX)".to_string(),
        "KFP = (HLR, LCV)".to_string(),
        "QLV = (PMX, BJK)".to_string(),
        "TLR = (QJG, XKJ)".to_string(),
        "NLQ = (XML, BDS)".to_string(),
        "JXD = (MQD, GBH)".to_string(),
        "LXP = (HRR, XDK)".to_string(),
        "DJS = (GLJ, RNF)".to_string(),
        "FLS = (FMB, MRL)".to_string(),
        "HXL = (BXS, FDM)".to_string(),
        "NQX = (KDN, HQQ)".to_string(),
        "PGR = (TJQ, HDR)".to_string(),
        "CGD = (DGS, VKN)".to_string(),
        "KRQ = (NQF, NGF)".to_string(),
        "JSB = (PNQ, DHV)".to_string(),
        "MBJ = (JCK, QRP)".to_string(),
        "MXQ = (DRG, DSM)".to_string(),
        "HMN = (CBP, CPG)".to_string(),
        "JTL = (RST, SPD)".to_string(),
        "DKG = (GQK, XMQ)".to_string(),
        "NJN = (TVS, VLF)".to_string(),
        "LTS = (JCB, TQF)".to_string(),
        "XNP = (JVF, VKM)".to_string(),
        "RTG = (XXJ, SQT)".to_string(),
        "KNT = (LRB, RRT)".to_string(),
        "SFL = (LXP, CDN)".to_string(),
        "GXD = (MMT, CNX)".to_string(),
        "SMC = (XTL, CHM)".to_string(),
        "JCB = (XCV, NDX)".to_string(),
        "DQT = (RBJ, QGF)".to_string(),
        "TFR = (MKH, NDP)".to_string(),
        "HTP = (CSQ, LPP)".to_string(),
        "JKM = (VVK, SHX)".to_string(),
        "LGG = (RPH, NTV)".to_string(),
        "NSR = (JDM, PFK)".to_string(),
        "QFT = (SNJ, RLV)".to_string(),
        "SQF = (GRG, RSX)".to_string(),
        "SFD = (FFK, RPD)".to_string(),
        "SCD = (SNC, LGQ)".to_string(),
        "CXK = (VDN, SQM)".to_string(),
        "LDP = (NLQ, DGV)".to_string(),
        "CDN = (XDK, HRR)".to_string(),
        "HFC = (QBD, HRF)".to_string(),
        "LGT = (NFX, TJN)".to_string(),
        "VKM = (QJP, HCX)".to_string(),
        "HGF = (SCD, TKT)".to_string(),
        "VGS = (SGB, VXD)".to_string(),
        "MGL = (FTN, LBF)".to_string(),
        "FDM = (DLQ, MLN)".to_string(),
        "FTP = (HJL, JQG)".to_string(),
        "TCN = (MRL, FMB)".to_string(),
        "NGR = (QPL, KMN)".to_string(),
        "NDX = (DMX, LTG)".to_string(),
        "GVJ = (JDG, PCK)".to_string(),
        "MVF = (KVR, TQK)".to_string(),
        "MXJ = (FPQ, VBV)".to_string(),
        "RNH = (DGV, NLQ)".to_string(),
        "RPD = (RFV, PGG)".to_string(),
        "JKG = (NHT, NHT)".to_string(),
        "XNX = (JDB, DQT)".to_string(),
        "DRL = (GCM, DSK)".to_string(),
        "TCF = (TCJ, SVQ)".to_string(),
        "LCL = (NJN, FSN)".to_string(),
        "MJM = (QSM, MXQ)".to_string(),
        "JJK = (BTM, MGR)".to_string(),
        "SPX = (JDG, PCK)".to_string(),
        "QLC = (DHJ, PVG)".to_string(),
        "GPC = (XKC, RTT)".to_string(),
        "TJQ = (XPG, GBN)".to_string(),
        "HSV = (XPR, MBG)".to_string(),
        "JKS = (RPH, NTV)".to_string(),
        "XDP = (KVG, LXQ)".to_string(),
        "JDS = (NBL, BVJ)".to_string(),
        "TQK = (NCR, HTP)".to_string(),
        "BLX = (TFS, LST)".to_string(),
        "KRR = (LXS, KBF)".to_string(),
        "XMQ = (KHB, MMC)".to_string(),
        "KBG = (DBG, MQR)".to_string(),
        "LRR = (KKL, PBT)".to_string(),
        "LFV = (HVQ, MNJ)".to_string(),
        "HGD = (MNL, PDJ)".to_string(),
        "GLB = (NDP, MKH)".to_string(),
        "CMB = (VDG, NCM)".to_string(),
        "TKD = (VCG, BLH)".to_string(),
        "BQJ = (TSB, RNB)".to_string(),
        "QBT = (MKB, RKM)".to_string(),
        "GJQ = (BTG, MMX)".to_string(),
        "SGF = (TKD, SQH)".to_string(),
        "RMD = (JRL, XFT)".to_string(),
        "DDJ = (HRS, XNP)".to_string(),
        "HNP = (KFQ, BQJ)".to_string(),
        "FQF = (MNJ, HVQ)".to_string(),
        "PJT = (FRQ, KFP)".to_string(),
        "RKM = (NGM, HNP)".to_string(),
        "VBV = (LVR, CPP)".to_string(),
        "RBJ = (SKV, MGT)".to_string(),
        "MPG = (SCD, TKT)".to_string(),
        "BHR = (BRM, FJC)".to_string(),
        "VTP = (CKX, PLS)".to_string(),
        "PBQ = (RQC, HGD)".to_string(),
        "RMX = (FTP, NGJ)".to_string(),
        "SMP = (KRR, HGN)".to_string(),
        "KBF = (RMK, BMQ)".to_string(),
        "LSL = (JSB, VPL)".to_string(),
        "KRM = (GDN, XVH)".to_string(),
        "DHJ = (SPV, KCS)".to_string(),
        "XNB = (QFH, PGQ)".to_string(),
        "TGJ = (DBG, MQR)".to_string(),
        "LHQ = (FNX, KFF)".to_string(),
        "GCM = (GFJ, BND)".to_string(),
        "MJQ = (BBK, KVM)".to_string(),
        "NQF = (SSP, VQJ)".to_string(),
        "VPL = (DHV, PNQ)".to_string(),
        "HHX = (SFQ, SGF)".to_string(),
        "FJL = (MGL, XKH)".to_string(),
        "HNH = (FDN, XLN)".to_string(),
        "RLK = (LCL, QVF)".to_string(),
        "SND = (CPG, CBP)".to_string(),
        "CNG = (DJS, HVS)".to_string(),
        "VDN = (QBK, MXJ)".to_string(),
        "BRM = (SMC, GKF)".to_string(),
        "VTK = (HRQ, GMQ)".to_string(),
        "MVX = (KKV, FQP)".to_string(),
        "TDR = (TMG, MDD)".to_string(),
        "SQT = (HGF, MPG)".to_string(),
        "TMN = (HVB, FTF)".to_string(),
        "GNB = (BFT, QXK)".to_string(),
        "QXP = (MJM, CBX)".to_string(),
        "GQK = (MMC, KHB)".to_string(),
        "QGX = (NDB, QSD)".to_string(),
        "TMX = (FNX, KFF)".to_string(),
        "BLD = (NBV, KLQ)".to_string(),
        "RHC = (NXK, PJT)".to_string(),
        "XJC = (QKG, QKG)".to_string(),
        "GBH = (HTG, PRL)".to_string(),
        "TPT = (TRQ, XXT)".to_string(),
        "FTF = (BBB, LLG)".to_string(),
        "QJG = (FKS, PQG)".to_string(),
        "FVR = (LXP, CDN)".to_string(),
        "XCA = (FVR, SFL)".to_string(),
        "VMJ = (KHP, MDV)".to_string(),
        "NTT = (LFP, BLX)".to_string(),
        "DMB = (TCN, FLS)".to_string(),
        "CQR = (LRX, XKS)".to_string(),
        "JFR = (TMN, DCT)".to_string(),
        "TRQ = (DDP, TLR)".to_string(),
        "BXS = (MLN, DLQ)".to_string(),
        "LLG = (LSK, XMD)".to_string(),
        "CBP = (RHF, BRD)".to_string(),
        "PFT = (SMP, BLZ)".to_string(),
        "TNS = (TMV, TJF)".to_string(),
        "DHV = (VFX, VVR)".to_string(),
        "PPL = (CKP, PMT)".to_string(),
        "QND = (DGQ, TRS)".to_string(),
        "VBL = (MGG, NGR)".to_string(),
        "FHM = (BPL, LQC)".to_string(),
        "KKT = (LRX, XKS)".to_string(),
        "LHS = (JCB, TQF)".to_string(),
        "LXL = (LJH, LJH)".to_string(),
        "BLT = (GGH, FJL)".to_string(),
        "JQG = (XCT, FRS)".to_string(),
        "KCS = (JNR, FRK)".to_string(),
        "SKX = (JKG, JKG)".to_string(),
        "VKN = (NMS, QBT)".to_string(),
        "DSL = (FMN, PJN)".to_string(),
        "TPJ = (VKN, DGS)".to_string(),
        "CKR = (JDB, DQT)".to_string(),
        "LKL = (QLQ, NXD)".to_string(),
        "SMM = (LMB, MCH)".to_string(),
        "FSN = (TVS, VLF)".to_string(),
        "KMS = (XNP, HRS)".to_string(),
        "MTX = (LGG, JKS)".to_string(),
        "CHM = (CTL, MPK)".to_string(),
        "HRQ = (QHQ, CTG)".to_string(),
        "QCG = (JMG, DPL)".to_string(),
        "TQH = (QXK, BFT)".to_string(),
        "JXC = (QBD, HRF)".to_string(),
        "JVF = (QJP, HCX)".to_string(),
        "TJF = (KCL, XGV)".to_string(),
        "XDS = (QQB, QQB)".to_string(),
        "KJG = (QND, XJK)".to_string(),
        "CTG = (FXN, PNP)".to_string(),
        "BBB = (LSK, XMD)".to_string(),
        "DMH = (NHF, JKM)".to_string(),
        "BGX = (LSS, MPM)".to_string(),
        "RHF = (VMF, NTR)".to_string(),
        "KHJ = (JPD, MVX)".to_string(),
        "SCS = (FNJ, RSM)".to_string(),
        "VFX = (LXV, XPP)".to_string(),
        "XLQ = (RMH, SFD)".to_string(),
        "HDB = (HVR, PBQ)".to_string(),
        "PTG = (SKX, GPH)".to_string(),
        "NTR = (LDG, LKV)".to_string(),
        "KKL = (NVG, DVP)".to_string(),
        "XKH = (FTN, LBF)".to_string(),
        "BDS = (TPD, VKQ)".to_string(),
        "QKG = (FBR, FBR)".to_string(),
        "LDS = (HQR, BJC)".to_string(),
        "KKV = (MPP, FKL)".to_string(),
        "JRQ = (TRQ, XXT)".to_string(),
        "MNP = (GQP, GQD)".to_string(),
        "BTM = (GJQ, TRM)".to_string(),
        "RPH = (GKN, SCM)".to_string(),
        "TQD = (RCC, NRG)".to_string(),
        "FQP = (FKL, MPP)".to_string(),
        "VFV = (QQB, HPB)".to_string(),
        "XSL = (CBX, MJM)".to_string(),
        "GKN = (DPB, PMM)".to_string(),
        "PBK = (QBH, GQL)".to_string(),
        "HPB = (PCB, RRM)".to_string(),
        "MCH = (RTG, XJN)".to_string(),
        "KSL = (FVL, NTT)".to_string(),
        "TCJ = (PXP, XQM)".to_string(),
        "RNF = (JTL, QQV)".to_string(),
        "BXA = (NFG, CQH)".to_string(),
        "KVK = (PRP, HLP)".to_string(),
        "NGF = (SSP, VQJ)".to_string(),
        "PJN = (BJB, HSV)".to_string(),
        "SFJ = (BJK, PMX)".to_string(),
        "CPL = (LDJ, RHB)".to_string(),
        "MKP = (TRJ, BFM)".to_string(),
        "RPT = (GRG, RSX)".to_string(),
        "PRQ = (XPH, DLP)".to_string(),
        "DSR = (KNT, JBB)".to_string(),
        "VPB = (RMH, SFD)".to_string(),
        "QLQ = (MKJ, DKP)".to_string(),
        "FNJ = (PDB, JRF)".to_string(),
        "SBH = (QKG, JVC)".to_string(),
        "PDC = (LDS, DTB)".to_string(),
        "QFP = (MJQ, HFK)".to_string(),
        "CTL = (RDD, KVK)".to_string(),
        "LXS = (BMQ, RMK)".to_string(),
        "VKF = (QBH, GQL)".to_string(),
        "HJL = (XCT, FRS)".to_string(),
        "KTK = (LDF, HPD)".to_string(),
        "RMK = (HFC, JXC)".to_string(),
        "MGT = (JFR, HXB)".to_string(),
        "XLN = (QFL, DXN)".to_string(),
        "FRQ = (HLR, LCV)".to_string(),
        "FMB = (KFK, LJK)".to_string(),
        "NFX = (KTL, QLF)".to_string(),
        "LMB = (RTG, XJN)".to_string(),
        "JDG = (TGJ, KBG)".to_string(),
        "MNJ = (GVJ, SPX)".to_string(),
        "VMF = (LDG, LKV)".to_string(),
        "SRN = (GCM, DSK)".to_string(),
        "JCC = (SVQ, TCJ)".to_string(),
        "NGJ = (HJL, JQG)".to_string(),
        "XCT = (SCJ, FDV)".to_string(),
        "FFK = (RFV, PGG)".to_string(),
        "NFN = (LJH, RMV)".to_string(),
        "GHV = (GQK, XMQ)".to_string(),
        "HFK = (KVM, BBK)".to_string(),
        "MNL = (GLB, TFR)".to_string(),
        "BPL = (LHQ, TMX)".to_string(),
        "LJH = (NCJ, NCJ)".to_string(),
        "FDV = (CQF, KRQ)".to_string(),
        "PBZ = (SFL, FVR)".to_string(),
        "MSB = (PPK, TLM)".to_string(),
        "GGH = (XKH, MGL)".to_string(),
        "MPK = (KVK, RDD)".to_string(),
        "VVR = (XPP, LXV)".to_string(),
        "NMS = (MKB, RKM)".to_string(),
        "NXK = (FRQ, KFP)".to_string(),
        "BSQ = (JCS, MBJ)".to_string(),
        "XMX = (DSL, CTX)".to_string(),
        "NHF = (VVK, SHX)".to_string(),
        "MMC = (CGD, TPJ)".to_string(),
        "GQP = (TLQ, XXG)".to_string(),
        "TRH = (FJC, BRM)".to_string(),
        "RLV = (NSR, KVD)".to_string(),
        "DKN = (PQH, SMM)".to_string(),
        "MSX = (LCL, QVF)".to_string(),
        "SKN = (KKR, RVF)".to_string(),
        "LSK = (PNV, MRS)".to_string(),
        "RDD = (PRP, HLP)".to_string(),
        "DRD = (JBQ, BLT)".to_string(),
        "GBS = (XDP, LJQ)".to_string(),
        "TFQ = (BLD, TNX)".to_string(),
        "QGS = (BNH, HJR)".to_string(),
        "LJK = (CVF, FMQ)".to_string(),
        "NCR = (CSQ, LPP)".to_string(),
        "HJQ = (SVM, TPM)".to_string(),
        "JCS = (QRP, JCK)".to_string(),
        "KTV = (VDG, NCM)".to_string(),
        "MMX = (GDG, JDS)".to_string(),
        "HVS = (GLJ, RNF)".to_string(),
        "XMD = (PNV, MRS)".to_string(),
        "VVK = (XDS, VFV)".to_string(),
        "FBR = (SMP, SMP)".to_string(),
        "XKJ = (PQG, FKS)".to_string(),
        "AAA = (LQS, DMB)".to_string(),
        "LCV = (FMM, QLH)".to_string(),
        "PPJ = (HVS, DJS)".to_string(),
        "DGS = (QBT, NMS)".to_string(),
        "PFG = (LDF, HPD)".to_string(),
        "HVR = (RQC, HGD)".to_string(),
        "QXK = (BMB, XQP)".to_string(),
        "BTN = (GHD, JXP)".to_string(),
        "DPR = (TRH, BHR)".to_string(),
        "KVG = (GNB, TQH)".to_string(),
        "GFJ = (KFG, SQB)".to_string(),
        "JCK = (SCB, HCM)".to_string(),
        "QSM = (DRG, DSM)".to_string(),
        "XPR = (XPV, MSB)".to_string(),
        "RNB = (TKX, MKP)".to_string(),
        "RHB = (TFQ, CJK)".to_string(),
        "PGQ = (VRF, MTX)".to_string(),
        "CDH = (GNT, NKP)".to_string(),
        "BVJ = (PRQ, GFQ)".to_string(),
        "LTG = (QGX, LVL)".to_string(),
        "XJR = (QXP, XSL)".to_string(),
        "JCV = (SPH, DDH)".to_string(),
        "GDN = (PVP, GBJ)".to_string(),
        "HNX = (KNT, JBB)".to_string(),
        "SFN = (MMT, CNX)".to_string(),
        "RGL = (FTP, NGJ)".to_string(),
        "VCA = (KRR, HGN)".to_string(),
        "ZZZ = (DMB, LQS)".to_string(),
        "GMK = (QLQ, NXD)".to_string(),
        "LKV = (VMG, SDQ)".to_string(),
        "PMZ = (CQH, NFG)".to_string(),
        "KBJ = (GHD, JXP)".to_string(),
        "PNQ = (VFX, VVR)".to_string(),
        "TPQ = (GNT, NKP)".to_string(),
        "SPD = (MHQ, BSQ)".to_string(),
        "XCV = (DMX, LTG)".to_string(),
        "BVB = (XKC, RTT)".to_string(),
        "BQL = (RGX, GRH)".to_string(),
        "JTS = (RSM, FNJ)".to_string(),
        "SPP = (BLT, JBQ)".to_string(),
        "VXT = (CPL, JVR)".to_string(),
        "MTL = (JHN, TQD)".to_string(),
        "KMN = (DDN, STH)".to_string(),
        "RQC = (PDJ, MNL)".to_string(),
        "FTM = (KHJ, BJZ)".to_string(),
        "RXT = (FVR, SFL)".to_string(),
        "QXR = (KVR, TQK)".to_string(),
        "HJR = (QJH, XJR)".to_string(),
        "BFS = (GQN, DKN)".to_string(),
        "TKX = (BFM, TRJ)".to_string(),
        "DGV = (BDS, XML)".to_string(),
        "DRG = (FRX, DMN)".to_string(),
        "VNX = (CNG, PPJ)".to_string(),
        "CSC = (MDV, KHP)".to_string(),
        "KMQ = (PJT, NXK)".to_string(),
        "DVP = (SCS, JTS)".to_string(),
        "LDF = (XMX, GKG)".to_string(),
        "QFH = (MTX, VRF)".to_string(),
        "RTT = (PQS, GBD)".to_string(),
        "KXR = (BDH, BDH)".to_string(),
        "SMD = (GHT, GGM)".to_string(),
        "TMB = (DMH, JJX)".to_string(),
        "KHP = (FHM, MGD)".to_string(),
        "TLF = (QMB, VNX)".to_string(),
        "FRK = (VTP, XSF)".to_string(),
        "KTL = (CHX, XSR)".to_string(),
        "GRH = (RLK, MSX)".to_string(),
        "QMD = (NHV, HXL)".to_string(),
        "KDV = (VRX, NXX)".to_string(),
        "LGQ = (VKF, PBK)".to_string(),
        "FVL = (BLX, LFP)".to_string(),
        "MMT = (NQQ, KSL)".to_string(),
        "CKP = (HJQ, HGC)".to_string(),
        "STH = (BKP, GLT)".to_string(),
        "QBK = (FPQ, VBV)".to_string(),
        "CTX = (FMN, PJN)".to_string(),
        "HHQ = (GBH, MQD)".to_string(),
        "JHV = (PXG, JPL)".to_string(),
        "FJC = (GKF, SMC)".to_string(),
        "TMG = (PFG, KTK)".to_string(),
        "XXG = (CRC, FGM)".to_string(),
        "BDH = (PBB, PBB)".to_string(),
        "FPQ = (CPP, LVR)".to_string(),
        "BKL = (BCJ, TDR)".to_string(),
        "GKG = (DSL, CTX)".to_string(),
        "LVL = (NDB, QSD)".to_string(),
        "BNH = (QJH, XJR)".to_string(),
        "TBG = (JVR, CPL)".to_string(),
        "CQH = (HNX, DSR)".to_string(),
        "VXD = (TKF, PMD)".to_string(),
        "MGR = (TRM, GJQ)".to_string(),
        "PDJ = (GLB, TFR)".to_string(),
        "HXB = (DCT, TMN)".to_string(),
        "XSM = (SQM, VDN)".to_string(),
        "HDR = (XPG, GBN)".to_string(),
        "GFQ = (XPH, DLP)".to_string(),
        "XKC = (PQS, GBD)".to_string(),
        "SBN = (TPQ, CDH)".to_string(),
        "RSX = (LFV, FQF)".to_string(),
        "PVP = (XNB, MLT)".to_string(),
        "LDG = (VMG, SDQ)".to_string(),
        "LXV = (LKL, GMK)".to_string(),
        "TKT = (SNC, LGQ)".to_string(),
        "SHX = (XDS, VFV)".to_string(),
        "GRG = (FQF, LFV)".to_string(),
        "QQV = (RST, SPD)".to_string(),
        "CNX = (NQQ, KSL)".to_string(),
        "DMX = (LVL, QGX)".to_string(),
        "CRC = (TVK, TNS)".to_string(),
        "JXP = (FFR, NCG)".to_string(),
        "BJC = (RGL, RMX)".to_string(),
        "BFT = (XQP, BMB)".to_string(),
        "SKV = (JFR, HXB)".to_string(),
        "JDB = (QGF, RBJ)".to_string(),
        "XRK = (NGR, MGG)".to_string(),
        "FXN = (JCV, VSK)".to_string(),
        "JJQ = (JSJ, BFS)".to_string(),
        "DDN = (BKP, GLT)".to_string(),
        "QBH = (XNX, CKR)".to_string(),
        "MLT = (PGQ, QFH)".to_string(),
        "SNC = (VKF, PBK)".to_string(),
        "FTN = (HDB, PQP)".to_string(),
        "DPL = (LSL, FXH)".to_string(),
        "TFS = (DPR, PVJ)".to_string(),
        "HVQ = (SPX, GVJ)".to_string(),
        "JJX = (NHF, JKM)".to_string(),
        "KVR = (HTP, NCR)".to_string(),
        "MQR = (SND, HMN)".to_string(),
        "MDD = (PFG, KTK)".to_string(),
        "PCB = (RXT, RXT)".to_string(),
        "NLT = (GBS, JLR)".to_string(),
        "GBD = (SMD, PJR)".to_string(),
        "NHV = (BXS, FDM)".to_string(),
        "GHT = (KLV, PTG)".to_string(),
        "SDQ = (LSX, FPH)".to_string(),
        "TRJ = (QXR, MVF)".to_string(),
        "HGC = (TPM, SVM)".to_string(),
        "MHQ = (JCS, MBJ)".to_string(),
        "CKX = (HPS, HPS)".to_string(),
        "SQM = (MXJ, QBK)".to_string(),
        "PQG = (PPL, PSM)".to_string(),
        "JRL = (CRL, XGS)".to_string(),
        "NRG = (DRD, SPP)".to_string(),
        "GHD = (NCG, FFR)".to_string(),
        "LBF = (PQP, HDB)".to_string(),
        "MKK = (KNN, PKP)".to_string(),
        "CPG = (RHF, BRD)".to_string(),
        "SQB = (KKT, CQR)".to_string(),
        "VKQ = (THT, KBB)".to_string(),
        "KFK = (FMQ, CVF)".to_string(),
        "PJR = (GHT, GGM)".to_string(),
        "FXH = (JSB, VPL)".to_string(),
        "JPQ = (PVG, DHJ)".to_string(),
        "PDB = (SKN, RMF)".to_string(),
        "JKX = (VXD, SGB)".to_string(),
        "DTB = (HQR, BJC)".to_string(),
        "VCG = (QLV, SFJ)".to_string(),
        "KVM = (SBN, VVF)".to_string(),
        "QXS = (TCF, JCC)".to_string(),
        "CJK = (BLD, TNX)".to_string(),
        "PKP = (VPB, XLQ)".to_string(),
        "JMG = (LSL, FXH)".to_string(),
        "FRX = (JRQ, TPT)".to_string(),
        "KFF = (FKG, NLT)".to_string(),
        "DPB = (RHC, KMQ)".to_string(),
        "SCB = (KJG, RHX)".to_string(),
        "DHN = (XJC, SBH)".to_string(),
        "QLH = (GPC, BVB)".to_string(),
        "PMX = (DRL, SRN)".to_string(),
        "XMK = (HFK, MJQ)".to_string(),
        "NDB = (JHV, JKP)".to_string(),
        "LQS = (TCN, FLS)".to_string(),
        "PGG = (NJD, QCG)".to_string(),
    ]
}
